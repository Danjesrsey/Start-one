const { config } = global.GoatBot;
const { writeFileSync } = require("fs-extra");

module.exports = {
  config: {
    name: "whitelist",
    version: "1.1",
    author: "Rahman Leon",
    countDown: 5,
    role: 2,
    shortDescription: {
      vi: "Qu·∫£n l√Ω danh s√°ch tr·∫Øng: th√™m, x√≥a, li·ªát k√™ ng∆∞·ªùi d√πng",
      en: "Manage whitelist: add, remove, list users",
    },
    longDescription: {
      vi: "Qu·∫£n l√Ω danh s√°ch tr·∫Øng: th√™m, x√≥a, li·ªát k√™ ng∆∞·ªùi d√πng",
      en: "Manage whitelist: add, remove, list users",
    },
    category: "box chat",
    guide: {
      vi: '   {pn} [add | -a] <uid | @tag>: Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch tr·∫Øng\n' +
        '   {pn} [remove | -r] <uid | @tag>: X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch tr·∫Øng\n' +
        '   {pn} [list | -l]: Li·ªát k√™ danh s√°ch tr·∫Øng\n' +
        '   {pn} [show | -s] <uid | @tag>: Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng trong danh s√°ch tr·∫Øng\n' +
        '   {pn} [toggle | -t]: B·∫≠t/T·∫Øt ch·∫ø ƒë·ªô danh s√°ch tr·∫Øng',
      en: '   {pn} [add | -a] <uid | @tag>: Add user to whitelist\n' +
        '   {pn} [remove | -r] <uid | @tag>: Remove user from whitelist\n' +
        '   {pn} [list | -l]: List all users in whitelist\n' +
        '   {pn} [show | -s] <uid | @tag>: Show information about user in whitelist\n' +
        '   {pn} [toggle | -t]: Enable/Disable whitelist mode',
    },
    aliases: ["wlt"],
  },

  langs: {
    vi: {
      added: "‚úÖ | ƒê√£ th√™m v√†o danh s√°ch tr·∫Øng cho %1 ng∆∞·ªùi d√πng:\n%2",
      alreadyInWhiteList: "\n‚ö† | %1 ng∆∞·ªùi d√πng ƒë√£ c√≥ trong danh s√°ch tr·∫Øng t·ª´ tr∆∞·ªõc r·ªìi:\n%2",
      missingIdAdd: "‚ö† | Vui l√≤ng nh·∫≠p ID ho·∫∑c tag ng∆∞·ªùi d√πng mu·ªën th√™m v√†o danh s√°ch tr·∫Øng",
      removed: "‚úÖ | ƒê√£ x√≥a kh·ªèi danh s√°ch tr·∫Øng c·ªßa %1 ng∆∞·ªùi d√πng:\n%2",
      notInWhiteList: "‚ö† | %1 ng∆∞·ªùi d√πng kh√¥ng c√≥ trong danh s√°ch tr·∫Øng:\n%2",
      missingIdRemove: "‚ö† | Vui l√≤ng nh·∫≠p ID ho·∫∑c tag ng∆∞·ªùi d√πng mu·ªën x√≥a kh·ªèi danh s√°ch tr·∫Øng",
      listWhiteList: "üìã | Danh s√°ch tr·∫Øng:\n%1",
      whiteListModeDisabled: "‚ö† | Ch·∫ø ƒë·ªô danh s√°ch tr·∫Øng hi·ªán ƒëang t·∫Øt.",
      showUserInfo: "üë§ | Th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng trong danh s√°ch tr·∫Øng:\n%1",
      missingIdShow: "‚ö† | Vui l√≤ng nh·∫≠p ID ho·∫∑c tag ng∆∞·ªùi d√πng mu·ªën xem th√¥ng tin",
      whiteListModeToggledOn: "‚úÖ | Ch·∫ø ƒë·ªô danh s√°ch tr·∫Øng ƒë√£ ƒë∆∞·ª£c b·∫≠t.",
      whiteListModeToggledOff: "‚úÖ | Ch·∫ø ƒë·ªô danh s√°ch tr·∫Øng ƒë√£ ƒë∆∞·ª£c t·∫Øt.",
    },
    en: {
      added: "‚úÖ | Added to whitelist for %1 user(s):\n%2",
      alreadyInWhiteList: "\n‚ö† | %1 user(s) already in the whitelist:\n%2",
      missingIdAdd: "‚ö† | Please enter ID or tag user to add to whitelist",
      removed: "‚úÖ | Removed from whitelist for %1 user(s):\n%2",
      notInWhiteList: "‚ö† | %1 user(s) not in the whitelist:\n%2",
      missingIdRemove: "‚ö† | Please enter ID or tag user to remove from whitelist",
      listWhiteList: "üìã | List of users in whitelist:\n%1",
      whiteListModeDisabled: "‚ö† | Whitelist mode is currently disabled.",
      showUserInfo: "üë§ | Information about user in whitelist:\n%1",
      missingIdShow: "‚ö† | Please enter ID or tag user to view information",
      whiteListModeToggledOn: "‚úÖ | Whitelist mode has been toggled on.",
      whiteListModeToggledOff: "‚úÖ | Whitelist mode has been toggled off.",
      },
  },

  onStart: async function ({ message, args, event, usersData, getLang }) {
    const { whiteListMode } = config;
    const { whiteListIds, enable } = whiteListMode;

    switch (args[0]) {
      case "add":
      case "-a": {
        if (args[1]) {
          let uids = [];
          if (Object.keys(event.mentions).length > 0)
            uids = Object.keys(event.mentions);
          else if (event.messageReply)
            uids.push(event.messageReply.senderID);
          else
            uids = args.slice(1).filter(arg => !isNaN(arg));

          const notInWhiteList = uids.filter(uid => !whiteListIds.includes(uid));

          whiteListIds.push(...notInWhiteList);
          writeFileSync(global.client.dirConfig, JSON.stringify(config, null, 2));

          const getNames = await Promise.all(uids.map(uid => usersData.getName(uid).then(name => ({ uid, name }))));

          return message.reply(
            notInWhiteList.length > 0 ?
              getLang("added", notInWhiteList.length, getNames.map(({ uid, name }) => `‚Ä¢ ${name} (${uid})`).join("\n")) :
              getLang("alreadyInWhiteList")
          );
        } else {
          return message.reply(getLang("missingIdAdd"));
        }
      }
      case "remove":
      case "-r": {
        if (args[1]) {
          let uids = [];
          if (Object.keys(event.mentions).length > 0)
            uids = Object.keys(event.mentions);
          else
            uids = args.slice(1).filter(arg => !isNaN(arg));

          const inWhiteList = uids.filter(uid => whiteListIds.includes(uid));

          config.whiteListMode.whiteListIds = whiteListIds.filter(uid => !inWhiteList.includes(uid));
          writeFileSync(global.client.dirConfig, JSON.stringify(config, null, 2));

          const getNames = await Promise.all(inWhiteList.map(uid => usersData.getName(uid).then(name => ({ uid, name }))));

          return message.reply(
            inWhiteList.length > 0 ?
              getLang("removed", inWhiteList.length, getNames.map(({ uid, name }) => `‚Ä¢ ${name} (${uid})`).join("\n")) :
              getLang("notInWhiteList")
          );
        } else {
          return message.reply(getLang("missingIdRemove"));
        }
      }
      case "list":
      case "-l": {
        const getNames = await Promise.all(whiteListIds.map(uid => usersData.getName(uid).then(name => ({ uid, name }))));
        return message.reply(
          getLang("listWhiteList", getNames.map(({ uid, name }) => `‚Ä¢ ${name} (${uid})`).join("\n"))
        );
      }
      case "show":
      case "-s": {
        if (args[1]) {
          const uidToShow = args[1];
          if (whiteListIds.includes(uidToShow)) {
            const userInfo = await usersData.getName(uidToShow).then(name => ({ uid: uidToShow, name }));
            return message.reply(getLang("showUserInfo", `‚Ä¢ ${userInfo.name} (${userInfo.uid})`));
          } else {
            return message.reply(getLang("notInWhiteList"));
          }
        } else {
          return message.reply(getLang("missingIdShow"));
        }
      }
      case "toggle":
      case "-t": {
        whiteListMode.enable = !enable;
        writeFileSync(global.client.dirConfig, JSON.stringify(config, null, 2));

        const toggleMessage = enable ? getLang("whiteListModeToggledOff") : getLang("whiteListModeToggledOn");
        return message.reply(toggleMessage);
      }
      default:
        return message.SyntaxError();
    }
  },
};
